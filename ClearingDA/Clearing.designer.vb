'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.239
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="Clearing")>  _
Partial Public Class ClearingDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertMonedas(instance As Monedas)
    End Sub
  Partial Private Sub UpdateMonedas(instance As Monedas)
    End Sub
  Partial Private Sub DeleteMonedas(instance As Monedas)
    End Sub
  Partial Private Sub InsertTipo_Documentos(instance As Tipo_Documentos)
    End Sub
  Partial Private Sub UpdateTipo_Documentos(instance As Tipo_Documentos)
    End Sub
  Partial Private Sub DeleteTipo_Documentos(instance As Tipo_Documentos)
    End Sub
  Partial Private Sub UpdateImagen(instance As Imagen)
    End Sub
  Partial Private Sub DeleteImagen(instance As Imagen)
    End Sub
  Partial Private Sub InsertCamara(instance As Camara)
    End Sub
  Partial Private Sub UpdateCamara(instance As Camara)
    End Sub
  Partial Private Sub DeleteCamara(instance As Camara)
    End Sub
  Partial Private Sub InsertSucursales(instance As Sucursales)
    End Sub
  Partial Private Sub UpdateSucursales(instance As Sucursales)
    End Sub
  Partial Private Sub DeleteSucursales(instance As Sucursales)
    End Sub
  Partial Private Sub InsertMaquinas(instance As Maquinas)
    End Sub
  Partial Private Sub UpdateMaquinas(instance As Maquinas)
    End Sub
  Partial Private Sub DeleteMaquinas(instance As Maquinas)
    End Sub
  Partial Private Sub InsertEstados(instance As Estados)
    End Sub
  Partial Private Sub UpdateEstados(instance As Estados)
    End Sub
  Partial Private Sub DeleteEstados(instance As Estados)
    End Sub
  Partial Private Sub InsertBancos(instance As Bancos)
    End Sub
  Partial Private Sub UpdateBancos(instance As Bancos)
    End Sub
  Partial Private Sub DeleteBancos(instance As Bancos)
    End Sub
  Partial Private Sub InsertCuentasEspeciales(instance As CuentasEspeciales)
    End Sub
  Partial Private Sub UpdateCuentasEspeciales(instance As CuentasEspeciales)
    End Sub
  Partial Private Sub DeleteCuentasEspeciales(instance As CuentasEspeciales)
    End Sub
  Partial Private Sub InsertMotivosRechazo(instance As MotivosRechazo)
    End Sub
  Partial Private Sub UpdateMotivosRechazo(instance As MotivosRechazo)
    End Sub
  Partial Private Sub DeleteMotivosRechazo(instance As MotivosRechazo)
    End Sub
  Partial Private Sub InsertAscii(instance As Ascii)
    End Sub
  Partial Private Sub UpdateAscii(instance As Ascii)
    End Sub
  Partial Private Sub DeleteAscii(instance As Ascii)
    End Sub
  Partial Private Sub InsertAscii_det(instance As Ascii_det)
    End Sub
  Partial Private Sub UpdateAscii_det(instance As Ascii_det)
    End Sub
  Partial Private Sub DeleteAscii_det(instance As Ascii_det)
    End Sub
  Partial Private Sub InsertFeriado(instance As Feriado)
    End Sub
  Partial Private Sub UpdateFeriado(instance As Feriado)
    End Sub
  Partial Private Sub DeleteFeriado(instance As Feriado)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.ClearingDA.My.MySettings.Default.ClearingConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property Monedas() As System.Data.Linq.Table(Of Monedas)
		Get
			Return Me.GetTable(Of Monedas)
		End Get
	End Property
	
	Public ReadOnly Property Tipo_Documentos() As System.Data.Linq.Table(Of Tipo_Documentos)
		Get
			Return Me.GetTable(Of Tipo_Documentos)
		End Get
	End Property
	
	Public ReadOnly Property Imagen() As System.Data.Linq.Table(Of Imagen)
		Get
			Return Me.GetTable(Of Imagen)
		End Get
	End Property
	
	Public ReadOnly Property Camara() As System.Data.Linq.Table(Of Camara)
		Get
			Return Me.GetTable(Of Camara)
		End Get
	End Property
	
	Public ReadOnly Property Sucursales() As System.Data.Linq.Table(Of Sucursales)
		Get
			Return Me.GetTable(Of Sucursales)
		End Get
	End Property
	
	Public ReadOnly Property Maquinas() As System.Data.Linq.Table(Of Maquinas)
		Get
			Return Me.GetTable(Of Maquinas)
		End Get
	End Property
	
	Public ReadOnly Property Estados() As System.Data.Linq.Table(Of Estados)
		Get
			Return Me.GetTable(Of Estados)
		End Get
	End Property
	
	Public ReadOnly Property Bancos() As System.Data.Linq.Table(Of Bancos)
		Get
			Return Me.GetTable(Of Bancos)
		End Get
	End Property
	
	Public ReadOnly Property CuentasEspeciales() As System.Data.Linq.Table(Of CuentasEspeciales)
		Get
			Return Me.GetTable(Of CuentasEspeciales)
		End Get
	End Property
	
	Public ReadOnly Property MotivosRechazos() As System.Data.Linq.Table(Of MotivosRechazo)
		Get
			Return Me.GetTable(Of MotivosRechazo)
		End Get
	End Property
	
	Public ReadOnly Property Asciis() As System.Data.Linq.Table(Of Ascii)
		Get
			Return Me.GetTable(Of Ascii)
		End Get
	End Property
	
	Public ReadOnly Property Ascii_dets() As System.Data.Linq.Table(Of Ascii_det)
		Get
			Return Me.GetTable(Of Ascii_det)
		End Get
	End Property
	
	Public ReadOnly Property Feriados() As System.Data.Linq.Table(Of Feriado)
		Get
			Return Me.GetTable(Of Feriado)
		End Get
	End Property
	
	Private Sub InsertImagen(ByVal obj As Imagen)
		Dim p1 As System.Nullable(Of Integer) = obj.IdImagen
		Me.GrabarImagen(p1, obj.nombre, obj.imagen)
		obj.IdImagen = p1.GetValueOrDefault
	End Sub
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GrabarImagen")>  _
	Public Function GrabarImagen(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdImagen", DbType:="Int")> ByRef idImagen As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Nombre", DbType:="VarChar(50)")> ByVal nombre As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Imagen", DbType:="Image")> ByVal imagen As System.Data.Linq.Binary) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), idImagen, nombre, imagen)
		idImagen = CType(result.GetParameterValue(0),System.Nullable(Of Integer))
		Return CType(result.ReturnValue,Integer)
	End Function
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Monedas")>  _
Partial Public Class Monedas
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _cod_moneda As String
	
	Private _descripcion As String
	
	Private _decimales As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Oncod_monedaChanging(value As String)
    End Sub
    Partial Private Sub Oncod_monedaChanged()
    End Sub
    Partial Private Sub OndescripcionChanging(value As String)
    End Sub
    Partial Private Sub OndescripcionChanged()
    End Sub
    Partial Private Sub OndecimalesChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OndecimalesChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cod_moneda", DbType:="Char(3) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property cod_moneda() As String
		Get
			Return Me._cod_moneda
		End Get
		Set
			If (String.Equals(Me._cod_moneda, value) = false) Then
				Me.Oncod_monedaChanging(value)
				Me.SendPropertyChanging
				Me._cod_moneda = value
				Me.SendPropertyChanged("cod_moneda")
				Me.Oncod_monedaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_descripcion", DbType:="VarChar(20)")>  _
	Public Property descripcion() As String
		Get
			Return Me._descripcion
		End Get
		Set
			If (String.Equals(Me._descripcion, value) = false) Then
				Me.OndescripcionChanging(value)
				Me.SendPropertyChanging
				Me._descripcion = value
				Me.SendPropertyChanged("descripcion")
				Me.OndescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_decimales", DbType:="Int")>  _
	Public Property decimales() As System.Nullable(Of Integer)
		Get
			Return Me._decimales
		End Get
		Set
			If (Me._decimales.Equals(value) = false) Then
				Me.OndecimalesChanging(value)
				Me.SendPropertyChanging
				Me._decimales = value
				Me.SendPropertyChanged("decimales")
				Me.OndecimalesChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Tipo_Documentos")>  _
Partial Public Class Tipo_Documentos
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _codTipoDocumento As Integer
	
	Private _descripcion As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OncodTipoDocumentoChanging(value As Integer)
    End Sub
    Partial Private Sub OncodTipoDocumentoChanged()
    End Sub
    Partial Private Sub OndescripcionChanging(value As String)
    End Sub
    Partial Private Sub OndescripcionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_codTipoDocumento", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property codTipoDocumento() As Integer
		Get
			Return Me._codTipoDocumento
		End Get
		Set
			If ((Me._codTipoDocumento = value)  _
						= false) Then
				Me.OncodTipoDocumentoChanging(value)
				Me.SendPropertyChanging
				Me._codTipoDocumento = value
				Me.SendPropertyChanged("codTipoDocumento")
				Me.OncodTipoDocumentoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_descripcion", DbType:="Char(10)")>  _
	Public Property descripcion() As String
		Get
			Return Me._descripcion
		End Get
		Set
			If (String.Equals(Me._descripcion, value) = false) Then
				Me.OndescripcionChanging(value)
				Me.SendPropertyChanging
				Me._descripcion = value
				Me.SendPropertyChanged("descripcion")
				Me.OndescripcionChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Imagen")>  _
Partial Public Class Imagen
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdImagen As Integer
	
	Private _imagen As System.Data.Linq.Binary
	
	Private _nombre As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdImagenChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdImagenChanged()
    End Sub
    Partial Private Sub OnimagenChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnimagenChanged()
    End Sub
    Partial Private Sub OnnombreChanging(value As String)
    End Sub
    Partial Private Sub OnnombreChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdImagen", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IdImagen() As Integer
		Get
			Return Me._IdImagen
		End Get
		Set
			If ((Me._IdImagen = value)  _
						= false) Then
				Me.OnIdImagenChanging(value)
				Me.SendPropertyChanging
				Me._IdImagen = value
				Me.SendPropertyChanged("IdImagen")
				Me.OnIdImagenChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_imagen", DbType:="Image", CanBeNull:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property imagen() As System.Data.Linq.Binary
		Get
			Return Me._imagen
		End Get
		Set
			If (Object.Equals(Me._imagen, value) = false) Then
				Me.OnimagenChanging(value)
				Me.SendPropertyChanging
				Me._imagen = value
				Me.SendPropertyChanged("imagen")
				Me.OnimagenChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_nombre", DbType:="VarChar(50)")>  _
	Public Property nombre() As String
		Get
			Return Me._nombre
		End Get
		Set
			If (String.Equals(Me._nombre, value) = false) Then
				Me.OnnombreChanging(value)
				Me.SendPropertyChanging
				Me._nombre = value
				Me.SendPropertyChanged("nombre")
				Me.OnnombreChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Camara")>  _
Partial Public Class Camara
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _cod_camara As String
	
	Private _Ciudad As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Oncod_camaraChanging(value As String)
    End Sub
    Partial Private Sub Oncod_camaraChanged()
    End Sub
    Partial Private Sub OnCiudadChanging(value As String)
    End Sub
    Partial Private Sub OnCiudadChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cod_camara", DbType:="Char(2) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property cod_camara() As String
		Get
			Return Me._cod_camara
		End Get
		Set
			If (String.Equals(Me._cod_camara, value) = false) Then
				Me.Oncod_camaraChanging(value)
				Me.SendPropertyChanging
				Me._cod_camara = value
				Me.SendPropertyChanged("cod_camara")
				Me.Oncod_camaraChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Ciudad", DbType:="VarChar(50)")>  _
	Public Property Ciudad() As String
		Get
			Return Me._Ciudad
		End Get
		Set
			If (String.Equals(Me._Ciudad, value) = false) Then
				Me.OnCiudadChanging(value)
				Me.SendPropertyChanging
				Me._Ciudad = value
				Me.SendPropertyChanged("Ciudad")
				Me.OnCiudadChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Sucursales")>  _
Partial Public Class Sucursales
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _cod_sucursal As Integer
	
	Private _nombre_sucusal As String
	
	Private _cod_banco As String
	
	Private _Banco As EntityRef(Of Bancos)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Oncod_sucursalChanging(value As Integer)
    End Sub
    Partial Private Sub Oncod_sucursalChanged()
    End Sub
    Partial Private Sub Onnombre_sucusalChanging(value As String)
    End Sub
    Partial Private Sub Onnombre_sucusalChanged()
    End Sub
    Partial Private Sub Oncod_bancoChanging(value As String)
    End Sub
    Partial Private Sub Oncod_bancoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Banco = CType(Nothing, EntityRef(Of Bancos))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cod_sucursal", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property cod_sucursal() As Integer
		Get
			Return Me._cod_sucursal
		End Get
		Set
			If ((Me._cod_sucursal = value)  _
						= false) Then
				Me.Oncod_sucursalChanging(value)
				Me.SendPropertyChanging
				Me._cod_sucursal = value
				Me.SendPropertyChanged("cod_sucursal")
				Me.Oncod_sucursalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_nombre_sucusal", DbType:="VarChar(30)")>  _
	Public Property nombre_sucusal() As String
		Get
			Return Me._nombre_sucusal
		End Get
		Set
			If (String.Equals(Me._nombre_sucusal, value) = false) Then
				Me.Onnombre_sucusalChanging(value)
				Me.SendPropertyChanging
				Me._nombre_sucusal = value
				Me.SendPropertyChanged("nombre_sucusal")
				Me.Onnombre_sucusalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cod_banco", DbType:="Char(2) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property cod_banco() As String
		Get
			Return Me._cod_banco
		End Get
		Set
			If (String.Equals(Me._cod_banco, value) = false) Then
				If Me._Banco.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Oncod_bancoChanging(value)
				Me.SendPropertyChanging
				Me._cod_banco = value
				Me.SendPropertyChanged("cod_banco")
				Me.Oncod_bancoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Bancos_Sucursales", Storage:="_Banco", ThisKey:="cod_banco", OtherKey:="cod_banco", IsForeignKey:=true)>  _
	Public Property Bancos() As Bancos
		Get
			Return Me._Banco.Entity
		End Get
		Set
			Dim previousValue As Bancos = Me._Banco.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Banco.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Banco.Entity = Nothing
					previousValue.Sucursales.Remove(Me)
				End If
				Me._Banco.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Sucursales.Add(Me)
					Me._cod_banco = value.cod_banco
				Else
					Me._cod_banco = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("Bancos")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Maquinas")>  _
Partial Public Class Maquinas
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _cod_maquina As Integer
	
	Private _nombre_maquina As String
	
	Private _nro_corrida_inicial As System.Nullable(Of Integer)
	
	Private _nro_corrida_final As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Oncod_maquinaChanging(value As Integer)
    End Sub
    Partial Private Sub Oncod_maquinaChanged()
    End Sub
    Partial Private Sub Onnombre_maquinaChanging(value As String)
    End Sub
    Partial Private Sub Onnombre_maquinaChanged()
    End Sub
    Partial Private Sub Onnro_corrida_inicialChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onnro_corrida_inicialChanged()
    End Sub
    Partial Private Sub Onnro_corrida_finalChanging(value As String)
    End Sub
    Partial Private Sub Onnro_corrida_finalChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cod_maquina", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property cod_maquina() As Integer
		Get
			Return Me._cod_maquina
		End Get
		Set
			If ((Me._cod_maquina = value)  _
						= false) Then
				Me.Oncod_maquinaChanging(value)
				Me.SendPropertyChanging
				Me._cod_maquina = value
				Me.SendPropertyChanged("cod_maquina")
				Me.Oncod_maquinaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_nombre_maquina", DbType:="VarChar(15)")>  _
	Public Property nombre_maquina() As String
		Get
			Return Me._nombre_maquina
		End Get
		Set
			If (String.Equals(Me._nombre_maquina, value) = false) Then
				Me.Onnombre_maquinaChanging(value)
				Me.SendPropertyChanging
				Me._nombre_maquina = value
				Me.SendPropertyChanged("nombre_maquina")
				Me.Onnombre_maquinaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_nro_corrida_inicial", DbType:="Int")>  _
	Public Property nro_corrida_inicial() As System.Nullable(Of Integer)
		Get
			Return Me._nro_corrida_inicial
		End Get
		Set
			If (Me._nro_corrida_inicial.Equals(value) = false) Then
				Me.Onnro_corrida_inicialChanging(value)
				Me.SendPropertyChanging
				Me._nro_corrida_inicial = value
				Me.SendPropertyChanged("nro_corrida_inicial")
				Me.Onnro_corrida_inicialChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_nro_corrida_final", DbType:="Char(10)")>  _
	Public Property nro_corrida_final() As String
		Get
			Return Me._nro_corrida_final
		End Get
		Set
			If (String.Equals(Me._nro_corrida_final, value) = false) Then
				Me.Onnro_corrida_finalChanging(value)
				Me.SendPropertyChanging
				Me._nro_corrida_final = value
				Me.SendPropertyChanged("nro_corrida_final")
				Me.Onnro_corrida_finalChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Estados")>  _
Partial Public Class Estados
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _cod_estado As Integer
	
	Private _nombre_estado As String
	
	Private _tabla As String
	
	Private _Bancos As EntitySet(Of Bancos)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Oncod_estadoChanging(value As Integer)
    End Sub
    Partial Private Sub Oncod_estadoChanged()
    End Sub
    Partial Private Sub Onnombre_estadoChanging(value As String)
    End Sub
    Partial Private Sub Onnombre_estadoChanged()
    End Sub
    Partial Private Sub OntablaChanging(value As String)
    End Sub
    Partial Private Sub OntablaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Bancos = New EntitySet(Of Bancos)(AddressOf Me.attach_Bancos, AddressOf Me.detach_Bancos)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cod_estado", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property cod_estado() As Integer
		Get
			Return Me._cod_estado
		End Get
		Set
			If ((Me._cod_estado = value)  _
						= false) Then
				Me.Oncod_estadoChanging(value)
				Me.SendPropertyChanging
				Me._cod_estado = value
				Me.SendPropertyChanged("cod_estado")
				Me.Oncod_estadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_nombre_estado", DbType:="VarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property nombre_estado() As String
		Get
			Return Me._nombre_estado
		End Get
		Set
			If (String.Equals(Me._nombre_estado, value) = false) Then
				Me.Onnombre_estadoChanging(value)
				Me.SendPropertyChanging
				Me._nombre_estado = value
				Me.SendPropertyChanged("nombre_estado")
				Me.Onnombre_estadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tabla", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property tabla() As String
		Get
			Return Me._tabla
		End Get
		Set
			If (String.Equals(Me._tabla, value) = false) Then
				Me.OntablaChanging(value)
				Me.SendPropertyChanging
				Me._tabla = value
				Me.SendPropertyChanged("tabla")
				Me.OntablaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Estados_Bancos", Storage:="_Bancos", ThisKey:="cod_estado", OtherKey:="estado")>  _
	Public Property Bancos() As EntitySet(Of Bancos)
		Get
			Return Me._Bancos
		End Get
		Set
			Me._Bancos.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Bancos(ByVal entity As Bancos)
		Me.SendPropertyChanging
		entity.Estados = Me
	End Sub
	
	Private Sub detach_Bancos(ByVal entity As Bancos)
		Me.SendPropertyChanging
		entity.Estados = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Bancos")>  _
Partial Public Class Bancos
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _cod_banco As String
	
	Private _nombre_banco As String
	
	Private _estado As Integer
	
	Private _CuentaPais As System.Nullable(Of Decimal)
	
	Private _Activo As System.Nullable(Of Boolean)
	
	Private _Sucursales As EntitySet(Of Sucursales)
	
	Private _Estados As EntityRef(Of Estados)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Oncod_bancoChanging(value As String)
    End Sub
    Partial Private Sub Oncod_bancoChanged()
    End Sub
    Partial Private Sub Onnombre_bancoChanging(value As String)
    End Sub
    Partial Private Sub Onnombre_bancoChanged()
    End Sub
    Partial Private Sub OnestadoChanging(value As Integer)
    End Sub
    Partial Private Sub OnestadoChanged()
    End Sub
    Partial Private Sub OnCuentaPaisChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnCuentaPaisChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Sucursales = New EntitySet(Of Sucursales)(AddressOf Me.attach_Sucursales, AddressOf Me.detach_Sucursales)
		Me._Estados = CType(Nothing, EntityRef(Of Estados))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cod_banco", DbType:="Char(2) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property cod_banco() As String
		Get
			Return Me._cod_banco
		End Get
		Set
			If (String.Equals(Me._cod_banco, value) = false) Then
				Me.Oncod_bancoChanging(value)
				Me.SendPropertyChanging
				Me._cod_banco = value
				Me.SendPropertyChanged("cod_banco")
				Me.Oncod_bancoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_nombre_banco", DbType:="VarChar(50)")>  _
	Public Property nombre_banco() As String
		Get
			Return Me._nombre_banco
		End Get
		Set
			If (String.Equals(Me._nombre_banco, value) = false) Then
				Me.Onnombre_bancoChanging(value)
				Me.SendPropertyChanging
				Me._nombre_banco = value
				Me.SendPropertyChanged("nombre_banco")
				Me.Onnombre_bancoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_estado", DbType:="Int NOT NULL")>  _
	Public Property estado() As Integer
		Get
			Return Me._estado
		End Get
		Set
			If ((Me._estado = value)  _
						= false) Then
				If Me._Estados.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnestadoChanging(value)
				Me.SendPropertyChanging
				Me._estado = value
				Me.SendPropertyChanged("estado")
				Me.OnestadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CuentaPais", DbType:="Decimal(12,0)")>  _
	Public Property CuentaPais() As System.Nullable(Of Decimal)
		Get
			Return Me._CuentaPais
		End Get
		Set
			If (Me._CuentaPais.Equals(value) = false) Then
				Me.OnCuentaPaisChanging(value)
				Me.SendPropertyChanging
				Me._CuentaPais = value
				Me.SendPropertyChanged("CuentaPais")
				Me.OnCuentaPaisChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit")>  _
	Public Property Activo() As System.Nullable(Of Boolean)
		Get
			Return Me._Activo
		End Get
		Set
			If (Me._Activo.Equals(value) = false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Bancos_Sucursales", Storage:="_Sucursales", ThisKey:="cod_banco", OtherKey:="cod_banco")>  _
	Public Property Sucursales() As EntitySet(Of Sucursales)
		Get
			Return Me._Sucursales
		End Get
		Set
			Me._Sucursales.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Estados_Bancos", Storage:="_Estados", ThisKey:="estado", OtherKey:="cod_estado", IsForeignKey:=true)>  _
	Public Property Estados() As Estados
		Get
			Return Me._Estados.Entity
		End Get
		Set
			Dim previousValue As Estados = Me._Estados.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Estados.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Estados.Entity = Nothing
					previousValue.Bancos.Remove(Me)
				End If
				Me._Estados.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Bancos.Add(Me)
					Me._estado = value.cod_estado
				Else
					Me._estado = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Estados")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Sucursales(ByVal entity As Sucursales)
		Me.SendPropertyChanging
		entity.Bancos = Me
	End Sub
	
	Private Sub detach_Sucursales(ByVal entity As Sucursales)
		Me.SendPropertyChanging
		entity.Bancos = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CuentasEspeciales")>  _
Partial Public Class CuentasEspeciales
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdCuenta As String
	
	Private _IdBanco As String
	
	Private _NombreCuenta As String
	
	Private _Activo As System.Nullable(Of Boolean)
	
	Private _Audit_Fecha As System.Nullable(Of Date)
	
	Private _Audit_Usuario As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdCuentaChanging(value As String)
    End Sub
    Partial Private Sub OnIdCuentaChanged()
    End Sub
    Partial Private Sub OnIdBancoChanging(value As String)
    End Sub
    Partial Private Sub OnIdBancoChanged()
    End Sub
    Partial Private Sub OnNombreCuentaChanging(value As String)
    End Sub
    Partial Private Sub OnNombreCuentaChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    Partial Private Sub OnAudit_FechaChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnAudit_FechaChanged()
    End Sub
    Partial Private Sub OnAudit_UsuarioChanging(value As String)
    End Sub
    Partial Private Sub OnAudit_UsuarioChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdCuenta", DbType:="VarChar(12) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property IdCuenta() As String
		Get
			Return Me._IdCuenta
		End Get
		Set
			If (String.Equals(Me._IdCuenta, value) = false) Then
				Me.OnIdCuentaChanging(value)
				Me.SendPropertyChanging
				Me._IdCuenta = value
				Me.SendPropertyChanged("IdCuenta")
				Me.OnIdCuentaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdBanco", DbType:="Char(2) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property IdBanco() As String
		Get
			Return Me._IdBanco
		End Get
		Set
			If (String.Equals(Me._IdBanco, value) = false) Then
				Me.OnIdBancoChanging(value)
				Me.SendPropertyChanging
				Me._IdBanco = value
				Me.SendPropertyChanged("IdBanco")
				Me.OnIdBancoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NombreCuenta", DbType:="VarChar(50)")>  _
	Public Property NombreCuenta() As String
		Get
			Return Me._NombreCuenta
		End Get
		Set
			If (String.Equals(Me._NombreCuenta, value) = false) Then
				Me.OnNombreCuentaChanging(value)
				Me.SendPropertyChanging
				Me._NombreCuenta = value
				Me.SendPropertyChanged("NombreCuenta")
				Me.OnNombreCuentaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit")>  _
	Public Property Activo() As System.Nullable(Of Boolean)
		Get
			Return Me._Activo
		End Get
		Set
			If (Me._Activo.Equals(value) = false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Audit_Fecha", DbType:="DateTime")>  _
	Public Property Audit_Fecha() As System.Nullable(Of Date)
		Get
			Return Me._Audit_Fecha
		End Get
		Set
			If (Me._Audit_Fecha.Equals(value) = false) Then
				Me.OnAudit_FechaChanging(value)
				Me.SendPropertyChanging
				Me._Audit_Fecha = value
				Me.SendPropertyChanged("Audit_Fecha")
				Me.OnAudit_FechaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Audit_Usuario", DbType:="VarChar(50)")>  _
	Public Property Audit_Usuario() As String
		Get
			Return Me._Audit_Usuario
		End Get
		Set
			If (String.Equals(Me._Audit_Usuario, value) = false) Then
				Me.OnAudit_UsuarioChanging(value)
				Me.SendPropertyChanging
				Me._Audit_Usuario = value
				Me.SendPropertyChanged("Audit_Usuario")
				Me.OnAudit_UsuarioChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.MotivosRechazo")>  _
Partial Public Class MotivosRechazo
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdMotivo As String
	
	Private _IdBanco As String
	
	Private _IdMotivoBCP As String
	
	Private _Motivo As String
	
	Private _Activo As System.Nullable(Of Boolean)
	
	Private _Audit_Fecha As System.Nullable(Of Date)
	
	Private _Audit_Usuario As String
	
	Private _AplicaComision As System.Nullable(Of Boolean)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdMotivoChanging(value As String)
    End Sub
    Partial Private Sub OnIdMotivoChanged()
    End Sub
    Partial Private Sub OnIdBancoChanging(value As String)
    End Sub
    Partial Private Sub OnIdBancoChanged()
    End Sub
    Partial Private Sub OnIdMotivoBCPChanging(value As String)
    End Sub
    Partial Private Sub OnIdMotivoBCPChanged()
    End Sub
    Partial Private Sub OnMotivoChanging(value As String)
    End Sub
    Partial Private Sub OnMotivoChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    Partial Private Sub OnAudit_FechaChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnAudit_FechaChanged()
    End Sub
    Partial Private Sub OnAudit_UsuarioChanging(value As String)
    End Sub
    Partial Private Sub OnAudit_UsuarioChanged()
    End Sub
    Partial Private Sub OnAplicaComisionChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnAplicaComisionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdMotivo", DbType:="Char(3) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property IdMotivo() As String
		Get
			Return Me._IdMotivo
		End Get
		Set
			If (String.Equals(Me._IdMotivo, value) = false) Then
				Me.OnIdMotivoChanging(value)
				Me.SendPropertyChanging
				Me._IdMotivo = value
				Me.SendPropertyChanged("IdMotivo")
				Me.OnIdMotivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdBanco", DbType:="Char(2) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property IdBanco() As String
		Get
			Return Me._IdBanco
		End Get
		Set
			If (String.Equals(Me._IdBanco, value) = false) Then
				Me.OnIdBancoChanging(value)
				Me.SendPropertyChanging
				Me._IdBanco = value
				Me.SendPropertyChanged("IdBanco")
				Me.OnIdBancoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdMotivoBCP", DbType:="Char(3)")>  _
	Public Property IdMotivoBCP() As String
		Get
			Return Me._IdMotivoBCP
		End Get
		Set
			If (String.Equals(Me._IdMotivoBCP, value) = false) Then
				Me.OnIdMotivoBCPChanging(value)
				Me.SendPropertyChanging
				Me._IdMotivoBCP = value
				Me.SendPropertyChanged("IdMotivoBCP")
				Me.OnIdMotivoBCPChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Motivo", DbType:="VarChar(50)")>  _
	Public Property Motivo() As String
		Get
			Return Me._Motivo
		End Get
		Set
			If (String.Equals(Me._Motivo, value) = false) Then
				Me.OnMotivoChanging(value)
				Me.SendPropertyChanging
				Me._Motivo = value
				Me.SendPropertyChanged("Motivo")
				Me.OnMotivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit")>  _
	Public Property Activo() As System.Nullable(Of Boolean)
		Get
			Return Me._Activo
		End Get
		Set
			If (Me._Activo.Equals(value) = false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Audit_Fecha", DbType:="DateTime")>  _
	Public Property Audit_Fecha() As System.Nullable(Of Date)
		Get
			Return Me._Audit_Fecha
		End Get
		Set
			If (Me._Audit_Fecha.Equals(value) = false) Then
				Me.OnAudit_FechaChanging(value)
				Me.SendPropertyChanging
				Me._Audit_Fecha = value
				Me.SendPropertyChanged("Audit_Fecha")
				Me.OnAudit_FechaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Audit_Usuario", DbType:="Char(10)")>  _
	Public Property Audit_Usuario() As String
		Get
			Return Me._Audit_Usuario
		End Get
		Set
			If (String.Equals(Me._Audit_Usuario, value) = false) Then
				Me.OnAudit_UsuarioChanging(value)
				Me.SendPropertyChanging
				Me._Audit_Usuario = value
				Me.SendPropertyChanged("Audit_Usuario")
				Me.OnAudit_UsuarioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AplicaComision", DbType:="Bit")>  _
	Public Property AplicaComision() As System.Nullable(Of Boolean)
		Get
			Return Me._AplicaComision
		End Get
		Set
			If (Me._AplicaComision.Equals(value) = false) Then
				Me.OnAplicaComisionChanging(value)
				Me.SendPropertyChanging
				Me._AplicaComision = value
				Me.SendPropertyChanged("AplicaComision")
				Me.OnAplicaComisionChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Ascii")>  _
Partial Public Class Ascii
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _idcabecera As Integer
	
	Private _cod_banco As String
	
	Private _descripcion As String
	
	Private _registro_inicio As String
	
	Private _registro_fin As String
	
	Private _sql As String
	
	Private _IdFormato As System.Nullable(Of Integer)
	
	Private _EstructuraDestino As String
	
	Private _Titulo As String
	
	Private _ArchivoDestino As String
	
	Private _Ascii_dets As EntitySet(Of Ascii_det)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidcabeceraChanging(value As Integer)
    End Sub
    Partial Private Sub OnidcabeceraChanged()
    End Sub
    Partial Private Sub Oncod_bancoChanging(value As String)
    End Sub
    Partial Private Sub Oncod_bancoChanged()
    End Sub
    Partial Private Sub OndescripcionChanging(value As String)
    End Sub
    Partial Private Sub OndescripcionChanged()
    End Sub
    Partial Private Sub Onregistro_inicioChanging(value As String)
    End Sub
    Partial Private Sub Onregistro_inicioChanged()
    End Sub
    Partial Private Sub Onregistro_finChanging(value As String)
    End Sub
    Partial Private Sub Onregistro_finChanged()
    End Sub
    Partial Private Sub OnsqlChanging(value As String)
    End Sub
    Partial Private Sub OnsqlChanged()
    End Sub
    Partial Private Sub OnIdFormatoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdFormatoChanged()
    End Sub
    Partial Private Sub OnEstructuraDestinoChanging(value As String)
    End Sub
    Partial Private Sub OnEstructuraDestinoChanged()
    End Sub
    Partial Private Sub OnTituloChanging(value As String)
    End Sub
    Partial Private Sub OnTituloChanged()
    End Sub
    Partial Private Sub OnArchivoDestinoChanging(value As String)
    End Sub
    Partial Private Sub OnArchivoDestinoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Ascii_dets = New EntitySet(Of Ascii_det)(AddressOf Me.attach_Ascii_dets, AddressOf Me.detach_Ascii_dets)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idcabecera", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property idcabecera() As Integer
		Get
			Return Me._idcabecera
		End Get
		Set
			If ((Me._idcabecera = value)  _
						= false) Then
				Me.OnidcabeceraChanging(value)
				Me.SendPropertyChanging
				Me._idcabecera = value
				Me.SendPropertyChanged("idcabecera")
				Me.OnidcabeceraChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cod_banco", DbType:="Char(2)")>  _
	Public Property cod_banco() As String
		Get
			Return Me._cod_banco
		End Get
		Set
			If (String.Equals(Me._cod_banco, value) = false) Then
				Me.Oncod_bancoChanging(value)
				Me.SendPropertyChanging
				Me._cod_banco = value
				Me.SendPropertyChanged("cod_banco")
				Me.Oncod_bancoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_descripcion", DbType:="VarChar(50)")>  _
	Public Property descripcion() As String
		Get
			Return Me._descripcion
		End Get
		Set
			If (String.Equals(Me._descripcion, value) = false) Then
				Me.OndescripcionChanging(value)
				Me.SendPropertyChanging
				Me._descripcion = value
				Me.SendPropertyChanged("descripcion")
				Me.OndescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_registro_inicio", DbType:="VarChar(150)")>  _
	Public Property registro_inicio() As String
		Get
			Return Me._registro_inicio
		End Get
		Set
			If (String.Equals(Me._registro_inicio, value) = false) Then
				Me.Onregistro_inicioChanging(value)
				Me.SendPropertyChanging
				Me._registro_inicio = value
				Me.SendPropertyChanged("registro_inicio")
				Me.Onregistro_inicioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_registro_fin", DbType:="VarChar(150)")>  _
	Public Property registro_fin() As String
		Get
			Return Me._registro_fin
		End Get
		Set
			If (String.Equals(Me._registro_fin, value) = false) Then
				Me.Onregistro_finChanging(value)
				Me.SendPropertyChanging
				Me._registro_fin = value
				Me.SendPropertyChanged("registro_fin")
				Me.Onregistro_finChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sql", DbType:="NVarChar(4000)")>  _
	Public Property sql() As String
		Get
			Return Me._sql
		End Get
		Set
			If (String.Equals(Me._sql, value) = false) Then
				Me.OnsqlChanging(value)
				Me.SendPropertyChanging
				Me._sql = value
				Me.SendPropertyChanged("sql")
				Me.OnsqlChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdFormato", DbType:="Int")>  _
	Public Property IdFormato() As System.Nullable(Of Integer)
		Get
			Return Me._IdFormato
		End Get
		Set
			If (Me._IdFormato.Equals(value) = false) Then
				Me.OnIdFormatoChanging(value)
				Me.SendPropertyChanging
				Me._IdFormato = value
				Me.SendPropertyChanged("IdFormato")
				Me.OnIdFormatoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EstructuraDestino", DbType:="VarChar(200)")>  _
	Public Property EstructuraDestino() As String
		Get
			Return Me._EstructuraDestino
		End Get
		Set
			If (String.Equals(Me._EstructuraDestino, value) = false) Then
				Me.OnEstructuraDestinoChanging(value)
				Me.SendPropertyChanging
				Me._EstructuraDestino = value
				Me.SendPropertyChanged("EstructuraDestino")
				Me.OnEstructuraDestinoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Titulo", DbType:="VarChar(50)")>  _
	Public Property Titulo() As String
		Get
			Return Me._Titulo
		End Get
		Set
			If (String.Equals(Me._Titulo, value) = false) Then
				Me.OnTituloChanging(value)
				Me.SendPropertyChanging
				Me._Titulo = value
				Me.SendPropertyChanged("Titulo")
				Me.OnTituloChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ArchivoDestino", DbType:="VarChar(50)")>  _
	Public Property ArchivoDestino() As String
		Get
			Return Me._ArchivoDestino
		End Get
		Set
			If (String.Equals(Me._ArchivoDestino, value) = false) Then
				Me.OnArchivoDestinoChanging(value)
				Me.SendPropertyChanging
				Me._ArchivoDestino = value
				Me.SendPropertyChanged("ArchivoDestino")
				Me.OnArchivoDestinoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Ascii_Ascii_det", Storage:="_Ascii_dets", ThisKey:="idcabecera", OtherKey:="idcabecera")>  _
	Public Property Ascii_dets() As EntitySet(Of Ascii_det)
		Get
			Return Me._Ascii_dets
		End Get
		Set
			Me._Ascii_dets.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Ascii_dets(ByVal entity As Ascii_det)
		Me.SendPropertyChanging
		entity.Ascii = Me
	End Sub
	
	Private Sub detach_Ascii_dets(ByVal entity As Ascii_det)
		Me.SendPropertyChanging
		entity.Ascii = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Ascii_det")>  _
Partial Public Class Ascii_det
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _iddetalle As Integer
	
	Private _idcabecera As System.Nullable(Of Integer)
	
	Private _descripcion As String
	
	Private _valor As String
	
	Private _orden As System.Nullable(Of Integer)
	
	Private _longitud As System.Nullable(Of Integer)
	
	Private _tipo As System.Nullable(Of Char)
	
	Private _formato As String
	
	Private _Ascii As EntityRef(Of Ascii)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OniddetalleChanging(value As Integer)
    End Sub
    Partial Private Sub OniddetalleChanged()
    End Sub
    Partial Private Sub OnidcabeceraChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnidcabeceraChanged()
    End Sub
    Partial Private Sub OndescripcionChanging(value As String)
    End Sub
    Partial Private Sub OndescripcionChanged()
    End Sub
    Partial Private Sub OnvalorChanging(value As String)
    End Sub
    Partial Private Sub OnvalorChanged()
    End Sub
    Partial Private Sub OnordenChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnordenChanged()
    End Sub
    Partial Private Sub OnlongitudChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnlongitudChanged()
    End Sub
    Partial Private Sub OntipoChanging(value As System.Nullable(Of Char))
    End Sub
    Partial Private Sub OntipoChanged()
    End Sub
    Partial Private Sub OnformatoChanging(value As String)
    End Sub
    Partial Private Sub OnformatoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Ascii = CType(Nothing, EntityRef(Of Ascii))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_iddetalle", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property iddetalle() As Integer
		Get
			Return Me._iddetalle
		End Get
		Set
			If ((Me._iddetalle = value)  _
						= false) Then
				Me.OniddetalleChanging(value)
				Me.SendPropertyChanging
				Me._iddetalle = value
				Me.SendPropertyChanged("iddetalle")
				Me.OniddetalleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idcabecera", DbType:="Int")>  _
	Public Property idcabecera() As System.Nullable(Of Integer)
		Get
			Return Me._idcabecera
		End Get
		Set
			If (Me._idcabecera.Equals(value) = false) Then
				If Me._Ascii.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnidcabeceraChanging(value)
				Me.SendPropertyChanging
				Me._idcabecera = value
				Me.SendPropertyChanged("idcabecera")
				Me.OnidcabeceraChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_descripcion", DbType:="VarChar(50)")>  _
	Public Property descripcion() As String
		Get
			Return Me._descripcion
		End Get
		Set
			If (String.Equals(Me._descripcion, value) = false) Then
				Me.OndescripcionChanging(value)
				Me.SendPropertyChanging
				Me._descripcion = value
				Me.SendPropertyChanged("descripcion")
				Me.OndescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_valor", DbType:="VarChar(200)")>  _
	Public Property valor() As String
		Get
			Return Me._valor
		End Get
		Set
			If (String.Equals(Me._valor, value) = false) Then
				Me.OnvalorChanging(value)
				Me.SendPropertyChanging
				Me._valor = value
				Me.SendPropertyChanged("valor")
				Me.OnvalorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_orden", DbType:="Int")>  _
	Public Property orden() As System.Nullable(Of Integer)
		Get
			Return Me._orden
		End Get
		Set
			If (Me._orden.Equals(value) = false) Then
				Me.OnordenChanging(value)
				Me.SendPropertyChanging
				Me._orden = value
				Me.SendPropertyChanged("orden")
				Me.OnordenChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_longitud", DbType:="Int")>  _
	Public Property longitud() As System.Nullable(Of Integer)
		Get
			Return Me._longitud
		End Get
		Set
			If (Me._longitud.Equals(value) = false) Then
				Me.OnlongitudChanging(value)
				Me.SendPropertyChanging
				Me._longitud = value
				Me.SendPropertyChanged("longitud")
				Me.OnlongitudChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tipo", DbType:="Char(1)")>  _
	Public Property tipo() As System.Nullable(Of Char)
		Get
			Return Me._tipo
		End Get
		Set
			If (Me._tipo.Equals(value) = false) Then
				Me.OntipoChanging(value)
				Me.SendPropertyChanging
				Me._tipo = value
				Me.SendPropertyChanged("tipo")
				Me.OntipoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_formato", DbType:="VarChar(50)")>  _
	Public Property formato() As String
		Get
			Return Me._formato
		End Get
		Set
			If (String.Equals(Me._formato, value) = false) Then
				Me.OnformatoChanging(value)
				Me.SendPropertyChanging
				Me._formato = value
				Me.SendPropertyChanged("formato")
				Me.OnformatoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Ascii_Ascii_det", Storage:="_Ascii", ThisKey:="idcabecera", OtherKey:="idcabecera", IsForeignKey:=true)>  _
	Public Property Ascii() As Ascii
		Get
			Return Me._Ascii.Entity
		End Get
		Set
			Dim previousValue As Ascii = Me._Ascii.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Ascii.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Ascii.Entity = Nothing
					previousValue.Ascii_dets.Remove(Me)
				End If
				Me._Ascii.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Ascii_dets.Add(Me)
					Me._idcabecera = value.idcabecera
				Else
					Me._idcabecera = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Ascii")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Feriados")>  _
Partial Public Class Feriado
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdFeriado As Integer
	
	Private _Dia As System.Nullable(Of Short)
	
	Private _Mes As System.Nullable(Of Short)
	
	Private _Año As System.Nullable(Of Short)
	
	Private _MultiAnual As System.Nullable(Of Boolean)
	
	Private _Descripcion As String
	
	Private _Audit_Fecha As System.Nullable(Of Date)
	
	Private _Audit_Usuario As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdFeriadoChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdFeriadoChanged()
    End Sub
    Partial Private Sub OnDiaChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnDiaChanged()
    End Sub
    Partial Private Sub OnMesChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnMesChanged()
    End Sub
    Partial Private Sub OnAñoChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnAñoChanged()
    End Sub
    Partial Private Sub OnMultiAnualChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnMultiAnualChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnAudit_FechaChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnAudit_FechaChanged()
    End Sub
    Partial Private Sub OnAudit_UsuarioChanging(value As String)
    End Sub
    Partial Private Sub OnAudit_UsuarioChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdFeriado", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IdFeriado() As Integer
		Get
			Return Me._IdFeriado
		End Get
		Set
			If ((Me._IdFeriado = value)  _
						= false) Then
				Me.OnIdFeriadoChanging(value)
				Me.SendPropertyChanging
				Me._IdFeriado = value
				Me.SendPropertyChanged("IdFeriado")
				Me.OnIdFeriadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Dia", DbType:="SmallInt")>  _
	Public Property Dia() As System.Nullable(Of Short)
		Get
			Return Me._Dia
		End Get
		Set
			If (Me._Dia.Equals(value) = false) Then
				Me.OnDiaChanging(value)
				Me.SendPropertyChanging
				Me._Dia = value
				Me.SendPropertyChanged("Dia")
				Me.OnDiaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Mes", DbType:="SmallInt")>  _
	Public Property Mes() As System.Nullable(Of Short)
		Get
			Return Me._Mes
		End Get
		Set
			If (Me._Mes.Equals(value) = false) Then
				Me.OnMesChanging(value)
				Me.SendPropertyChanging
				Me._Mes = value
				Me.SendPropertyChanged("Mes")
				Me.OnMesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Año", DbType:="SmallInt")>  _
	Public Property Año() As System.Nullable(Of Short)
		Get
			Return Me._Año
		End Get
		Set
			If (Me._Año.Equals(value) = false) Then
				Me.OnAñoChanging(value)
				Me.SendPropertyChanging
				Me._Año = value
				Me.SendPropertyChanged("Año")
				Me.OnAñoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MultiAnual", DbType:="Bit")>  _
	Public Property MultiAnual() As System.Nullable(Of Boolean)
		Get
			Return Me._MultiAnual
		End Get
		Set
			If (Me._MultiAnual.Equals(value) = false) Then
				Me.OnMultiAnualChanging(value)
				Me.SendPropertyChanging
				Me._MultiAnual = value
				Me.SendPropertyChanged("MultiAnual")
				Me.OnMultiAnualChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="VarChar(50)")>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Audit_Fecha", DbType:="DateTime")>  _
	Public Property Audit_Fecha() As System.Nullable(Of Date)
		Get
			Return Me._Audit_Fecha
		End Get
		Set
			If (Me._Audit_Fecha.Equals(value) = false) Then
				Me.OnAudit_FechaChanging(value)
				Me.SendPropertyChanging
				Me._Audit_Fecha = value
				Me.SendPropertyChanged("Audit_Fecha")
				Me.OnAudit_FechaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Audit_Usuario", DbType:="VarChar(50)")>  _
	Public Property Audit_Usuario() As String
		Get
			Return Me._Audit_Usuario
		End Get
		Set
			If (String.Equals(Me._Audit_Usuario, value) = false) Then
				Me.OnAudit_UsuarioChanging(value)
				Me.SendPropertyChanging
				Me._Audit_Usuario = value
				Me.SendPropertyChanged("Audit_Usuario")
				Me.OnAudit_UsuarioChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
